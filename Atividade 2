atividade 2: Atividade 2

Para atividade 2 a criação das tabelas de Entrega e Compra.

CREATE TABLE wl_entrega (
    idPedido VARCHAR(255),
    totalPedido DECIMAL(9,2),
    email VARCHAR(100),
    codigoComprador VARCHAR(255),
    nomeComprador VARCHAR(100),
    endereco VARCHAR(200),
    cep VARCHAR(20),
    uf VARCHAR(2),
    pais VARCHAR(50),
    PRIMARY KEY (idPedido),
    FOREIGN KEY (idPedido) REFERENCES wl_pedidos(codigoPedido)
);

CREATE TABLE wl_compra (
    sku VARCHAR(15),
    nomeProduto VARCHAR(100),
    quantidadeNecessaria INT,
    PRIMARY KEY (sku)
);


----------------------------------------

DECLARE @idPedido VARCHAR(255),  
        @qtd INT, 
        @sku VARCHAR(50), 
        @upc VARCHAR(50), 
        @nomeProduto VARCHAR(50), 
        @valor DECIMAL(9,2), 
        @frete DECIMAL(9,2), 
        @email VARCHAR(100), 
        @codigoComprador VARCHAR(255),  
        @nomeComprador VARCHAR(100), 
        @endereco VARCHAR(200), 
        @cep VARCHAR(20), 
        @uf VARCHAR(2), 
        @pais VARCHAR(50),
        @totalPedido DECIMAL(9,2),
        @estoqueAtual INT,
        @totalEntrega DECIMAL(9,2);

-- Início do cursor
DECLARE pedidoCursor CURSOR FOR 
    SELECT p.codigoPedido, pi.SKU, pi.UPC, pi.nomeProduto, pi.quantidade, pi.valor, p.frete, 
           p.email, p.codigoComprador, p.nomeComprador, p.endereco, p.CEP, p.UF, p.pais
    FROM wl_pedidos p 
    INNER JOIN wl_itemPedido pi ON pi.codigoPedido = p.codigoPedido  
    WHERE p.status = 'pendente'  -- Adicionar a coluna status à tabela wl_pedidos
    ORDER BY pi.valor * pi.quantidade DESC;  -- Ordena pelo valor total do pedido

OPEN pedidoCursor;

FETCH NEXT FROM pedidoCursor INTO @idPedido, @sku, @upc, @nomeProduto, @qtd, @valor, @frete, 
                                @email, @codigoComprador, @nomeComprador, @endereco, @cep, @uf, @pais;

-- Inicia o processamento dos pedidos
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Calcula o valor total do pedido (quantidade * valor)
    SET @totalPedido = @qtd * @valor + @frete;
    
    -- Atualiza a tabela wl_entrega
    INSERT INTO wl_entrega (idPedido, totalPedido, email, codigoComprador, nomeComprador, endereco, cep, uf, pais)
    VALUES (@idPedido, @totalPedido, @email, @codigoComprador, @nomeComprador, @endereco, @cep, @uf, @pais);

    -- Verifica o estoque atual do produto
    SELECT @estoqueAtual = quantidade FROM wl_estoque WHERE SKU = @sku;
    
    -- Se houver estoque suficiente, debita o produto
    IF @estoqueAtual >= @qtd
    BEGIN
        UPDATE wl_estoque
        SET quantidade = quantidade - @qtd
        WHERE SKU = @sku;
        
        -- Calcula o valor da entrega
        SET @totalEntrega = @qtd * @valor;
        
        -- Registra a entrega
        PRINT('Pedido entregue: ' + CAST(@idPedido AS VARCHAR) + ', Produto: ' + @nomeProduto + ', Quantidade: ' + CAST(@qtd AS VARCHAR));
    END
    ELSE
    BEGIN
        -- Se não houver estoque suficiente, insere o produto na tabela wl_compra
        INSERT INTO wl_compra (sku, nomeProduto, quantidadeNecessaria)
        VALUES (@sku, @nomeProduto, @qtd - @estoqueAtual);
        
        -- Atualiza o estoque para zero
        UPDATE wl_estoque
        SET quantidade = 0
        WHERE SKU = @sku;
        
        -- Calcula a entrega parcial (se houver algum estoque)
        IF @estoqueAtual > 0
        BEGIN
            SET @totalEntrega = @estoqueAtual * @valor;
            
            PRINT('Entrega parcial: Pedido ' + CAST(@idPedido AS VARCHAR) + ', Produto: ' + @nomeProduto + ', Quantidade entregue: ' + CAST(@estoqueAtual AS VARCHAR));
        END
        
        PRINT('Produto em falta: ' + @nomeProduto + ' será comprado. Quantidade necessária: ' + CAST(@qtd - @estoqueAtual AS VARCHAR));
    END

    -- Buscar o próximo pedido
    FETCH NEXT FROM pedidoCursor INTO @idPedido, @sku, @upc, @nomeProduto, @qtd, @valor, @frete, 
                                    @email, @codigoComprador, @nomeComprador, @endereco, @cep, @uf, @pais;
END

-- Fechar e desalocar o cursor
CLOSE pedidoCursor;
DEALLOCATE pedidoCursor;
