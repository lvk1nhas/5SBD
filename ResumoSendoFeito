5SBD - Scripts de Banco de Dados e SQL
Professor: André Neves
Aluno: Lucas Oliveira



Verifique se minhas atividades estão corretas, sao duas atividades.

atividade 1: Resposta da atividade 1

1. Criar a Tabela Temporária

CREATE TEMPORARY TABLE wl_tempdata (
    codigoPedido VARCHAR(255),
    dataPedido DATE,
    SKU VARCHAR(255),
    UPC VARCHAR(255),
    nomeProduto VARCHAR(255),
    quantidade INT,
    valor DECIMAL(10,2),
    frete DECIMAL(10,2),
    email VARCHAR(255),
    codigoComprador VARCHAR(255),
    nomeComprador VARCHAR(255),
    endereco VARCHAR(255),
    CEP VARCHAR(10),
    UF CHAR(2),
    pais VARCHAR(50)
);

Comando: Inserindo dados do TXT no banco
LOAD DATA INFILE 'C:/Users/casol/Downloads/pedidos.txt'
INTO TABLE wl_tempdata
FIELDS TERMINATED BY ';' 
ENCLOSED BY '"' 
LINES TERMINATED BY '\n'
(codigoPedido, dataPedido, SKU, UPC, nomeProduto, quantidade, valor, frete, email, codigoComprador, nomeComprador, endereco, CEP, UF, pais);


Comando: Selecionar clientes sem repetição
SELECT DISTINCT codigoComprador, email, endereco, CEP, UF, pais FROM wl_tempdata GROUP BY codigoComprador;

Descrição do comando:
Selecionar distintamente [codigoComprador, email, endereco, CEP, UF, pais] da tabela [wl_tempdata], agrupando a consulta em [codigoComprador].



2. Criar a Tabela Cliente

CREATE TABLE wl_clientes (
    idCliente INT AUTO_INCREMENT PRIMARY KEY,
    nomeComprador VARCHAR(255),
    email VARCHAR(255),
    codigoComprador VARCHAR(255) UNIQUE,
    endereco VARCHAR(255),
    CEP VARCHAR(10),
    UF CHAR(2),
    pais VARCHAR(50)
);

3. Criar a Tabela Produtos 

CREATE TABLE wl_produtos (
    idProduto INT AUTO_INCREMENT PRIMARY KEY,
    SKU VARCHAR(15) UNIQUE,
    UPC VARCHAR(3),
    nomeProduto VARCHAR(50),
    valor DECIMAL(10, 2)
);

4. Criar a Tabela Estoque

CREATE TABLE wl_estoque (
    idEstoque INT AUTO_INCREMENT PRIMARY KEY,
    SKU VARCHAR(15) UNIQUE,
    quantidade INT
);

5. Criar a Tabela Pedido

CREATE TABLE wl_pedidos (
    codigoPedido VARCHAR(255) PRIMARY KEY,
    dataPedido DATE,
    status ENUM('pendente', 'entregue', 'cancelado', 'em andamento'),
    codigoComprador VARCHAR(255),
    FOREIGN KEY (codigoComprador) REFERENCES wl_clientes(codigoComprador)
);


6. Criar a Tabela Item do Pedido

CREATE TABLE wl_itemPedido (
    id INT AUTO_INCREMENT PRIMARY KEY,
    codigoPedido VARCHAR(255),
    SKU VARCHAR(255),
    UPC VARCHAR(255),
    nomeProduto VARCHAR(255),
    quantidade INT,
    valor DECIMAL(10,2),
    frete DECIMAL(10,2),
    FOREIGN KEY (codigoPedido) REFERENCES wl_pedidos(codigoPedido)
);

-----------------------------------------------------------------------

Inserindo os Dados

1. Inserir Dados na Tabela Cliente:

INSERT INTO wl_clientes (nomeComprador, email, codigoComprador, endereco, CEP, UF, pais) SELECT DISTINCT nomeComprador, email, codigoComprador, endereco, CEP, UF, pais FROM wl_tempdata GROUP BY codigoComprador;

2. Inserir Dados na Tabela Produtos:

Comando: SQL pra importação dos dados em arquivo CSV:

LOAD DATA INFILE 'C:/Users/casol/Downloads/produtos.csv'
INTO TABLE wl_produtos FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n' (SKU, UPC, nomeProduto, valor);

Descrição do comando:
Carregando conteúdo dentro do arquivo [produtos.csv]
para dentro da tabela [wl_produtos]
com campos terminados em [vírgula], encapsulados por [aspas] e linhas terminando em [quebra de linha]
para as colunas [SKU, UPC, nomeProduto, valor].

ou 

Inserir direto da tabela wl_tempdata

INSERT INTO wl_produtos (SKU, UPC, nomeProduto, valor) SELECT DISTINCT SKU, UPC, nomeProduto, valor FROM wl_tempdata;

3. Inserir Dados na Tabela Estoque:

INSERT INTO wl_estoque (SKU, quantidade) SELECT SKU, SUM(quantidade) AS quantidade FROM wl_tempdata GROUP BY SKU;

4. Inserir Dados na Tabela Pedido:

INSERT INTO wl_pedidos (codigoPedido, dataPedido, codigoComprador) SELECT DISTINCT codigoPedido, dataPedido, codigoComprador FROM wl_tempdata JOIN wl_clientes ON wl_tempdata.codigoComprador = wl_clientes.codigoComprador;

Explicação sem group by: O DISTINCT já garante que as combinações de codigoPedido, dataPedido, e codigoComprador sejam únicas. Não é necessário agrupar por uma coluna específica porque o DISTINCT já lida com a eliminação de duplicatas.

5. Inserir Dados na Tabela ItemPedido:

INSERT INTO wl_ItemPedido (codigoPedido, SKU, UPC, nomeProduto, quantidade, valor, frete) SELECT codigoPedido, SKU, UPC, nomeProduto, quantidade, valor, frete FROM wl_tempdata JOIN wl_pedidos ON wl_tempdata.codigoPedido = wl_pedidos.codigoPedido
JOIN wl_produtos ON wl_tempdata.SKU = wl_produtos.SKU;

DROP TEMPORARY TABLE wl_tempdata;

FIM DA ATIVIDADE 1 

-----------------------------------------------------------------------

atividade 2: Atividade 2

Para atividade 2 a criação das tabelas de Entrega e Compra.

CREATE TABLE wl_entrega (
    idPedido VARCHAR(255),
    totalPedido DECIMAL(9,2),
    email VARCHAR(100),
    codigoComprador VARCHAR(255),
    nomeComprador VARCHAR(100),
    endereco VARCHAR(200),
    cep VARCHAR(20),
    uf VARCHAR(2),
    pais VARCHAR(50),
    PRIMARY KEY (idPedido),
    FOREIGN KEY (idPedido) REFERENCES wl_pedidos(codigoPedido)
);

CREATE TABLE wl_compra (
    sku VARCHAR(15),
    nomeProduto VARCHAR(100),
    quantidadeNecessaria INT,
    PRIMARY KEY (sku)
);


----------------------------------------

DECLARE @idPedido VARCHAR(255),  
        @qtd INT, 
        @sku VARCHAR(50), 
        @upc VARCHAR(50), 
        @nomeProduto VARCHAR(50), 
        @valor DECIMAL(9,2), 
        @frete DECIMAL(9,2), 
        @email VARCHAR(100), 
        @codigoComprador VARCHAR(255),  
        @nomeComprador VARCHAR(100), 
        @endereco VARCHAR(200), 
        @cep VARCHAR(20), 
        @uf VARCHAR(2), 
        @pais VARCHAR(50),
        @totalPedido DECIMAL(9,2),
        @estoqueAtual INT,
        @totalEntrega DECIMAL(9,2);

-- Início do cursor
DECLARE pedidoCursor CURSOR FOR 
    SELECT p.codigoPedido, pi.SKU, pi.UPC, pi.nomeProduto, pi.quantidade, pi.valor, p.frete, 
           p.email, p.codigoComprador, p.nomeComprador, p.endereco, p.CEP, p.UF, p.pais
    FROM wl_pedidos p 
    INNER JOIN wl_itemPedido pi ON pi.codigoPedido = p.codigoPedido  
    WHERE p.status = 'pendente'  -- Adicionar a coluna status à tabela wl_pedidos
    ORDER BY pi.valor * pi.quantidade DESC;  -- Ordena pelo valor total do pedido

OPEN pedidoCursor;

FETCH NEXT FROM pedidoCursor INTO @idPedido, @sku, @upc, @nomeProduto, @qtd, @valor, @frete, 
                                @email, @codigoComprador, @nomeComprador, @endereco, @cep, @uf, @pais;

-- Inicia o processamento dos pedidos
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Calcula o valor total do pedido (quantidade * valor)
    SET @totalPedido = @qtd * @valor + @frete;
    
    -- Atualiza a tabela wl_entrega
    INSERT INTO wl_entrega (idPedido, totalPedido, email, codigoComprador, nomeComprador, endereco, cep, uf, pais)
    VALUES (@idPedido, @totalPedido, @email, @codigoComprador, @nomeComprador, @endereco, @cep, @uf, @pais);

    -- Verifica o estoque atual do produto
    SELECT @estoqueAtual = quantidade FROM wl_estoque WHERE SKU = @sku;
    
    -- Se houver estoque suficiente, debita o produto
    IF @estoqueAtual >= @qtd
    BEGIN
        UPDATE wl_estoque
        SET quantidade = quantidade - @qtd
        WHERE SKU = @sku;
        
        -- Calcula o valor da entrega
        SET @totalEntrega = @qtd * @valor;
        
        -- Registra a entrega
        PRINT('Pedido entregue: ' + CAST(@idPedido AS VARCHAR) + ', Produto: ' + @nomeProduto + ', Quantidade: ' + CAST(@qtd AS VARCHAR));
    END
    ELSE
    BEGIN
        -- Se não houver estoque suficiente, insere o produto na tabela wl_compra
        INSERT INTO wl_compra (sku, nomeProduto, quantidadeNecessaria)
        VALUES (@sku, @nomeProduto, @qtd - @estoqueAtual);
        
        -- Atualiza o estoque para zero
        UPDATE wl_estoque
        SET quantidade = 0
        WHERE SKU = @sku;
        
        -- Calcula a entrega parcial (se houver algum estoque)
        IF @estoqueAtual > 0
        BEGIN
            SET @totalEntrega = @estoqueAtual * @valor;
            
            PRINT('Entrega parcial: Pedido ' + CAST(@idPedido AS VARCHAR) + ', Produto: ' + @nomeProduto + ', Quantidade entregue: ' + CAST(@estoqueAtual AS VARCHAR));
        END
        
        PRINT('Produto em falta: ' + @nomeProduto + ' será comprado. Quantidade necessária: ' + CAST(@qtd - @estoqueAtual AS VARCHAR));
    END

    -- Buscar o próximo pedido
    FETCH NEXT FROM pedidoCursor INTO @idPedido, @sku, @upc, @nomeProduto, @qtd, @valor, @frete, 
                                    @email, @codigoComprador, @nomeComprador, @endereco, @cep, @uf, @pais;
END

-- Fechar e desalocar o cursor
CLOSE pedidoCursor;
DEALLOCATE pedidoCursor;





